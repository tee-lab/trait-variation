# -*- coding: utf-8 -*-
"""GSTFnovar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vej35IJcKTOz0dnvhqsYrJRo2cloljxK
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import numpy as np
import pandas as pd

# Copied cust_range() and crange() from stack overflow
def cust_range(*args, rtol=1e-05, atol=1e-08, include=[True, False]):
    # process arguments
    if len(args) == 1:
        start = 0

        step = 1
    elif len(args) == 2:
        start, stop = args
        step = 1
    else:
        assert len(args) == 3
        start, stop, step = tuple(args)

    # determine number of segments
    n = (stop-start)/step + 1

    # do rounding for n
    if np.isclose(n, np.round(n), rtol=rtol, atol=atol):
        n = np.round(n)

    # correct for start/end is exluded
    if not include[0]:
        n -= 1
        start += step
    if not include[1]:
        n -= 1
        stop -= step

    return np.linspace(start, stop, int(n))

def crange(*args, **kwargs):
    return cust_range(*args, **kwargs, include=[True, True])


al=0.5 #value of forest tree growth rate
# simulating ODEs for no variation
def iterations_no_var(al):
  global Gseq, timesteps, u, v, dt, th
  l=np.zeros((len(Gseq),2))
  for g0 in range(len(Gseq)):

          G0 = Gseq[g0]
          F0 = 0.0001
          S0 = T0 = (1-G0-F0)/2

          for t in range(0,timesteps):
                G_t= G0 + (u*S0 + v*T0 - G0*b*T0+(0.1 + (0.3-0.1)/(1+np.exp((0.2-G0)/0.005)))*F0-al*G0*F0)*dt
                S_t = S0+ (b*G0*T0 - (0.5 + (0.1-0.5)/(1+np.exp((th-G0)/0.005)))*S0 - u*S0-al*S0*F0)*dt;
                T_t = T0 + ((0.5 + (0.1-0.5)/(1+np.exp((th-G0)/0.005)))*S0 - v*T0-al*T0*F0)*dt;
                F_t = F0 + (al*(1-F0)*F0-(0.1 + (0.3-0.1)/(1+np.exp((0.2-G0)/0.005)))*F0)*dt
                G0 = G_t
                T0 = T_t
                S0 = S_t
                F0 = F_t
          l[g0]=1-G0, F0
  return l

Gseq = np.arange(0,1,0.01) # Initial Grass covers
Gseq = np.round(Gseq,2)
Bseq = crange(0,2,0.02) # Values of sapling birth rate
Bseq = np.round(Bseq,2)

# Dataframes to save the steady-state values of Grass cover (G) and  Tree cover (T)
df_G = pd.DataFrame({'Gi':Gseq})
for i in Bseq:
    df_G[i] = 0

df_F = pd.DataFrame({'Gi':Gseq})
for i in Bseq:
    df_F[i] = 0

tim = 1 # Total time over which the simulations will run
dt = 0.1 # step size of time
timesteps = int(tim/dt) # total no. of timesteps

# Set the value of other traits here:
u = 0.5 # sapling death rate
v = 0.1 # tree death rate
th = 0.5 # sapling resistance to fire

x = []
for i in Bseq:
    y = iterations_no_var(i)
    x.append(y)

# Saving output values from the simulation to the dataframes
for i in range(1,len(Bseq)+1):
    for j in range(0,len(Gseq)):
        df_G.iat[j,i] = x[i-1][j][0]
        df_F.iat[j,i] = x[i-1][j][1]

df_G.to_csv('Gnovar_u_'+str(u)+'_v_'+str(v)+'_th_'+str(th)+'_no_var.csv') #Generates a .csv file with steady-state grass cover
df_F.to_csv('Fnovar_u_'+str(u)+'_v_'+str(v)+'_th_'+str(th)+'_no_var.csv') #Generates a .csv file with steady-state forest tree cover